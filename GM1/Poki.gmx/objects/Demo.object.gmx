<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_pig</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Demo Setup

log[0]      = "Demo Created";

application_surface_enable(false);
application_surface_draw_enable(false);

draw_set_font(font0);

/// register the callback script ExtCallback
callback_define_script("game_callback", ExtCallback(""));

/// I complete poki loading in the first room of my game
/// the previous loading update calls are sent out from ImageLoadBar extension

poki_loading(1);
poki_loading_finished();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Demo Variables




state       = "none";
statePrev   = "none";
step        = 0;
wiggle      = 0;

rewarded    = false;

info        = "Press SPACE to start game";
gameDuration= 240;

musicOn     = false;

isBrowser   = os_browser != browser_not_a_browser;

prevWidth   = 0;
prevHeight  = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Corner Test Buttons

with (instance_create(x, y, Button)) {
    side = 1;
}

with (instance_create(x, y, Button)) {
    side = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delayed Audio Mute

MusicStop();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Demo Controls

if (keyboard_check_pressed(vk_space)) {
    switch (state){
        case "running":
        GamePause();
        break;
        
        case "paused":
        GameResume();
        break;
        
        default:
        GameStart(true);
        break;
    }
}

if (keyboard_check_pressed(ord("R"))) {
    if (state == "none" || state == "over") {
        poki_rewarded_break("cake");
    }
}

if (keyboard_check_pressed(ord("M"))) {
    musicOn = !musicOn;
    if (musicOn) {
        MusicPlay();
    } else {
        audio_stop_sound(sound_background);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Logic 

switch (state) {
    case "running":
    var sine = sin(step * 0.1);
    
    step --;
    
    wiggle = abs(sine) * 20;
    image_angle = sine * 20;
    
    if (step ==  0) {
        GameOver();
    } else {
        info = string(step) + "/" + string(gameDuration);
    }
    break;
    
    case "paused":
    info    = "Press SPACE to resume the game";
    break;
    
    case "none":
    case "over":    
    step        = gameDuration;
    wiggle      = 0;
    image_angle = 0;
    info    = "Press SPACE to start game";
    if (!rewarded) {
        info += "#Press R for reward";
    } else {
        info += "#Got cake";    
    }
    break;
}

x = view_xview + view_wview * 0.5;
y = view_yview + view_hview * 0.5 - wiggle;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Scaling 

if (os_browser != browser_not_a_browser) {
    if (browser_width != prevWidth || browser_height != prevHeight) {
        window_set_size(browser_width, browser_height);
        ScreenScale(browser_width, browser_height);
    }
} else {
    if (window_get_width() != prevWidth || window_get_height() != prevHeight) {
        ScreenScale(window_get_width(), window_get_height());
    }
}

with (Button) {
    y = view_yview + view_hview - 32;
    x = view_xview + view_wview * 0.5 + side * (view_wview * 0.5 - 32);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Log

var count = array_length_1d(log);
var start = max(0, count - 15);
var logString = "";

for (var i = start; i &lt; count; i++) {
    logString += log[i] + "#";
}

draw_set_color(c_black);
draw_set_halign(fa_left);
draw_set_valign(fa_top);

draw_text_transformed(view_xview + 10, view_yview + 10, logString, 0.8, 0.8, 0);

var controlString = "M - toggle music";
if (musicOn) {
    controlString += " (ON)";
} else {
    controlString += " (OFF)";
}
draw_set_halign(fa_right);
draw_text_transformed(view_xview + view_wview - 10, view_yview + 10, controlString, 0.8, 0.8, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Object And Info
draw_self();
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_text_transformed(x, y + 64, info, 0.8, 0.8, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
